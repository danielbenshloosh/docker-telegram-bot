language: bash
services: docker

env:
  - VERSION=3.7 VARIANT=stretch MODE=build
  - VERSION=3.6 VARIANT=stretch MODE=build
before_install:
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  - sudo apt-get update
install:
  - git clone https://github.com/docker-library/official-images.git ~/official-images
before_script:
  - |
    (
      [ ! "$MODE" == "build" ] || sudo apt-get -y install docker-ce
    )
  - docker version
  - docker --version
  - env | sort
  - FOLDER="./bot"
  - dockerfile_dir="python$VERSION/$VARIANT"
  - slash='/'; image="luckydonald${slash}telegram-bot:python${VERSION}-${VARIANT//$slash/-}"
  - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
script:
  - |
    (
      set -Eeuo pipefail
      set -x
      ls -lah .
      ls -lah $FOLDER
      ls -lah bot/entrypoint.sh
      ls -lah $FOLDER/entrypoint.sh
      # build/pull
      DATE=$(date +%Y-%m-%d)
      if [ "$MODE" == "build" ] ; then
        travis_retry docker build --build-arg FOLDER="$FOLDER" --build-arg BASE_IMAGE_GIT_COMMIT="$TRAVIS_COMMIT" --build-arg BASE_IMAGE_GIT_MESSAGE="$TRAVIS_COMMIT_MESSAGE" -t "$image" -t "$image-$DATE-$TRAVIS_COMMIT"  -t "$image-$DATE"  -t "$image-$TRAVIS_COMMIT" -f $dockerfile_dir/Dockerfile .
      else
        docker pull "$image"
      fi
      # test
      ~/official-images/test/run.sh --config ~/official-images/test/config.sh --config ./test_config.sh "$image"
      # push/ignore
      if [ "$TRAVIS_BRANCH" == "master" -a "$MODE" == "build" ]; then
          travis_retry docker push "$image"
          travis_retry docker push "$image-$TRAVIS_COMMIT"
          travis_retry docker push "$image-$DATE"
          travis_retry docker push "$image-$DATE-$TRAVIS_COMMIT"
      fi
      # onbuild
      onbuild_dir="$dockerfile_dir/onbuild"
      if [ -d $onbuild_dir ]; then
        onbuildFrom="$(awk 'toupper($1) == "FROM" { print $2; exit }' $onbuild_dir/Dockerfile)"
        docker tag "$image" "$onbuildFrom"
        # build/pull
        if [ "$MODE" == "build" ] ; then
          docker build --build-arg FOLDER="$FOLDER"  --build-arg GIT_COMMIT="$TRAVIS_COMMIT" --build-arg GIT_MESSAGE="$TRAVIS_COMMIT_MESSAGE" -t "$image-onbuild" -t "$image-$DATE-$TRAVIS_COMMIT-onbuild"  -t "$image-$DATE-onbuild"  -t "$image-$TRAVIS_COMMIT-onbuild"  -f $onbuild_dir/Dockerfile .
        else
          docker pull "$image-onbuild"
        fi
        # tests
        ~/official-images/test/run.sh --config ~/official-images/test/config.sh --config ./test_config.sh "$image-onbuild"
        # push/ignore
        if [ "$TRAVIS_BRANCH" == "master" -a "$MODE" == "build" ]; then
          travis_retry docker push "$image-onbuild"
          travis_retry docker push "$image-$TRAVIS_COMMIT-onbuild"
          travis_retry docker push "$image-$DATE-onbuild"
          travis_retry docker push "$image-$DATE-$TRAVIS_COMMIT-onbuild"
        fi # travis
      fi # onbuild
    )
after_script:
  - docker images
